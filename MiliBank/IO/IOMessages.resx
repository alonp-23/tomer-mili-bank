<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountAddSuccess" xml:space="preserve">
    <value>Account created successfully (Account No. {0})</value>
  </data>
  <data name="AccountBalance" xml:space="preserve">
    <value>Balance:</value>
  </data>
  <data name="AccountDeleteFail" xml:space="preserve">
    <value>Could not delete account matching account No. {0}</value>
  </data>
  <data name="AccountDeleteSuccess" xml:space="preserve">
    <value>Account deleted successfully</value>
  </data>
  <data name="AccountDoesNotExist" xml:space="preserve">
    <value>Account with number {0} does not exist</value>
  </data>
  <data name="AccountNumber" xml:space="preserve">
    <value>Account No.</value>
  </data>
  <data name="AccountOrUserDoNotExist" xml:space="preserve">
    <value>User ID or account number do not exist</value>
  </data>
  <data name="AccountOwnedByUser" xml:space="preserve">
    <value>This account is already linked to this user</value>
  </data>
  <data name="AccountOwnerId" xml:space="preserve">
    <value>Owner ID:</value>
  </data>
  <data name="AccountOwnerName" xml:space="preserve">
    <value>Owner name:</value>
  </data>
  <data name="AccountVip" xml:space="preserve">
    <value>VIP Account</value>
  </data>
  <data name="AddUserToAccountSuccess" xml:space="preserve">
    <value>Successfully added user with ID {0} to account No. {1}</value>
  </data>
  <data name="AddUserToAccountTitle" xml:space="preserve">
    <value>Add User to an Account</value>
  </data>
  <data name="AllAccountsByUserTitle" xml:space="preserve">
    <value>All Related Accounts</value>
  </data>
  <data name="AllUsersTitle" xml:space="preserve">
    <value>All Millibank Users</value>
  </data>
  <data name="CreateAccountTitle" xml:space="preserve">
    <value>Create a New Account</value>
  </data>
  <data name="CreateUserTitle" xml:space="preserve">
    <value>Create User</value>
  </data>
  <data name="DeleteAccountTitle" xml:space="preserve">
    <value>Delete an Account</value>
  </data>
  <data name="DeleteUserFail" xml:space="preserve">
    <value>Could not delete user with ID: </value>
  </data>
  <data name="DeleteUserSuccess" xml:space="preserve">
    <value>User deleted successfully</value>
  </data>
  <data name="DeleteUserTitle" xml:space="preserve">
    <value>Delete a User</value>
  </data>
  <data name="DepositSuccess" xml:space="preserve">
    <value>Successfully deposited {0}$ to account {1}</value>
  </data>
  <data name="DepositTitle" xml:space="preserve">
    <value>Deposit</value>
  </data>
  <data name="EnterAccountNumber" xml:space="preserve">
    <value>Enter account Number</value>
  </data>
  <data name="GetConfirmation" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
  <data name="InsertAmount" xml:space="preserve">
    <value>Enter amount</value>
  </data>
  <data name="InsertId" xml:space="preserve">
    <value>Enter user ID</value>
  </data>
  <data name="InsertName" xml:space="preserve">
    <value>Enter account owner's name</value>
  </data>
  <data name="InsertVipFlag" xml:space="preserve">
    <value>Is the account VIP?</value>
  </data>
  <data name="InvalidAccountNumber" xml:space="preserve">
    <value>Invalid account number</value>
  </data>
  <data name="InvalidAmount" xml:space="preserve">
    <value>Amount must be positive and under</value>
  </data>
  <data name="InvalidConfirmationInput" xml:space="preserve">
    <value>Invalid option</value>
  </data>
  <data name="InvalidId" xml:space="preserve">
    <value>ID must consist of {0} digits</value>
  </data>
  <data name="InvalidMenuOption" xml:space="preserve">
    <value>Invalid menu option</value>
  </data>
  <data name="InvalidName" xml:space="preserve">
    <value>Name must consist of {0} - {1} english characters (or white spaces)</value>
  </data>
  <data name="MenuAddUserToAccount" xml:space="preserve">
    <value>Add user to account</value>
  </data>
  <data name="MenuCreateAccount" xml:space="preserve">
    <value>Create an account</value>
  </data>
  <data name="MenuCreateUser" xml:space="preserve">
    <value>Create a user</value>
  </data>
  <data name="MenuDeleteAccount" xml:space="preserve">
    <value>Delete an account</value>
  </data>
  <data name="MenuDeleteUser" xml:space="preserve">
    <value>Delete a user</value>
  </data>
  <data name="MenuDeposit" xml:space="preserve">
    <value>Deposit</value>
  </data>
  <data name="MenuExit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="MenuPrintAllRelatedAccounts" xml:space="preserve">
    <value>Print all accounts related to user</value>
  </data>
  <data name="MenuPrintAllUsers" xml:space="preserve">
    <value>Print all users</value>
  </data>
  <data name="MenuTitle" xml:space="preserve">
    <value>MiliBank</value>
  </data>
  <data name="MenuWithdraw" xml:space="preserve">
    <value>Withdraw</value>
  </data>
  <data name="NoSuchAccount" xml:space="preserve">
    <value>Could not find accont matching that account number</value>
  </data>
  <data name="OverdraftNotAllowed" xml:space="preserve">
    <value>This account does not have enough money to preform that action</value>
  </data>
  <data name="PressAnyKeyToContinue" xml:space="preserve">
    <value>Press any key to continue...</value>
  </data>
  <data name="UserAlreadyExists" xml:space="preserve">
    <value>User with such ID already exists</value>
  </data>
  <data name="UserCreationSuccess" xml:space="preserve">
    <value>User created successfully</value>
  </data>
  <data name="UserDoesNotExist" xml:space="preserve">
    <value>User does not exist</value>
  </data>
  <data name="UserId" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="WithdrawSuccess" xml:space="preserve">
    <value>Successfully withdrew {0}$ from account No. {1}</value>
  </data>
  <data name="WithdrawTitle" xml:space="preserve">
    <value>Withdraw</value>
  </data>
</root>